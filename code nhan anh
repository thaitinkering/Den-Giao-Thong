import socket
import struct
import cv2
import numpy as np

# ====== TH√îNG TIN ESP32 CAM ======
ESP32_IP = "192.168.100.2"   # ‚ö†Ô∏è NH·ªö thay b·∫±ng IP th·∫≠t t·ª´ Serial Monitor
ESP32_PORT = 9999

# ====== T·∫†O CLIENT SOCKET ======
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((ESP32_IP, ESP32_PORT))
print("‚úÖ ƒê√£ k·∫øt n·ªëi ESP32-CAM t·∫°i", ESP32_IP)

try:
    while True:
        # ====== B∆Ø·ªöC 1: Nh·∫≠n ƒë·ªô d√†i ·∫£nh (4 byte) ======
        raw_len = client.recv(4)
        if not raw_len:
            print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë·ªô d√†i ·∫£nh!")
            break
        img_len = struct.unpack('<I', raw_len)[0]

        # ====== B∆Ø·ªöC 2: Nh·∫≠n to√†n b·ªô ·∫£nh JPEG ======
        img_data = b''
        while len(img_data) < img_len:
            chunk = client.recv(min(4096, img_len - len(img_data)))
            if not chunk:
                print("‚ö†Ô∏è M·∫•t d·ªØ li·ªáu trong qu√° tr√¨nh nh·∫≠n ·∫£nh.")
                break
            img_data += chunk

        # ====== B∆Ø·ªöC 3: Gi·∫£i m√£ ·∫£nh JPEG b·∫±ng OpenCV ======
        np_arr = np.frombuffer(img_data, np.uint8)
        frame = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        # ====== B∆Ø·ªöC 4: Hi·ªÉn th·ªã ·∫£nh ======
        if frame is not None:
            cv2.imshow("ESP32-CAM Live", frame)
        else:
            print("‚ö†Ô∏è Kh√¥ng gi·∫£i m√£ ƒë∆∞·ª£c ·∫£nh!")

        # Nh·∫•n Q ƒë·ªÉ tho√°t
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("\nüõë D·ª´ng b·ªüi ng∆∞·ªùi d√πng.")

finally:
    client.close()
    cv2.destroyAllWindows()
    print("üîí K·∫øt n·ªëi TCP ƒë√£ ƒë√≥ng.")
