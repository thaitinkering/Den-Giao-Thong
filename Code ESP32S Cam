#include <WiFi.h>
#include <esp_camera.h>
#include <esp_sleep.h>

// ──────────────────────────────────────────────────────────────
//                 CONFIGURATION & CONSTANTS
// ──────────────────────────────────────────────────────────────

// Wi-Fi credentials
const char* WIFI_SSID     = "Dong Bui";
const char* WIFI_PASSWORD = "123456789";

// TCP server details
const char* SERVER_IP     = "192.168.1.165";
const uint16_t SERVER_PORT = 9999;

// Timing intervals (ms)
const unsigned long WIFI_RECONNECT_INTERVAL    = 5000;
const unsigned long TCP_RECONNECT_INTERVAL     = 5000;
const unsigned long FRAME_SEND_TIMEOUT         = 10000;

// After this many TCP failures, trigger a soft reset via deep-sleep
const int MAX_TCP_FAILURES = 5;

// Camera parameters
#define CAMERA_FRAME_SIZE    FRAMESIZE_240X240
#define CAMERA_JPEG_QUALITY  12
#define CAMERA_FB_COUNT      2

// Deep-sleep duration (μs) to simulate reset
const uint64_t SLEEP_DURATION_US = 2e6;  // 2 seconds

// ──────────────────────────────────────────────────────────────
//                        GLOBAL STATE
// ──────────────────────────────────────────────────────────────

WiFiClient   tcpClient;
unsigned long lastWiFiAttempt    = 0;
unsigned long lastTCPAttempt     = 0;
unsigned long lastFrameSentAt    = 0;
int           tcpFailCount       = 0;

// ──────────────────────────────────────────────────────────────
//                          HELPERS
// ──────────────────────────────────────────────────────────────

uint32_t calculateChecksum(const uint8_t* data, size_t len) {
  uint32_t sum = 0;
  for (size_t i = 0; i < len; ++i) sum += data[i];
  return sum;
}

void enterDeepSleep() {
  Serial.println("🔄 Entering deep sleep for soft reset...");
  esp_deep_sleep(SLEEP_DURATION_US);
}

// Initialize camera with double buffering
void setupCamera() {
  camera_config_t cfg = {};
  cfg.ledc_channel    = LEDC_CHANNEL_0;
  cfg.ledc_timer      = LEDC_TIMER_0;
  cfg.pin_d0          = 5;
  cfg.pin_d1          = 18;
  cfg.pin_d2          = 19;
  cfg.pin_d3          = 21;
  cfg.pin_d4          = 36;
  cfg.pin_d5          = 39;
  cfg.pin_d6          = 34;
  cfg.pin_d7          = 35;
  cfg.pin_xclk        = 0;
  cfg.pin_pclk        = 22;
  cfg.pin_vsync       = 25;
  cfg.pin_href        = 23;
  cfg.pin_sscb_sda    = 26;
  cfg.pin_sscb_scl    = 27;
  cfg.pin_pwdn        = 32;
  cfg.pin_reset       = -1;
  cfg.xclk_freq_hz    = 20000000;
  cfg.pixel_format    = PIXFORMAT_JPEG;
  cfg.frame_size      = CAMERA_FRAME_SIZE;
  cfg.jpeg_quality    = CAMERA_JPEG_QUALITY;
  cfg.fb_count        = CAMERA_FB_COUNT;

  esp_err_t err = esp_camera_init(&cfg);
  if (err != ESP_OK) {
    Serial.printf("❌ Camera init failed: 0x%x\n", err);
    enterDeepSleep();
  }
}

bool connectTCP() {
  if (tcpClient.connect(SERVER_IP, SERVER_PORT)) {
    tcpClient.setNoDelay(true);
    tcpFailCount = 0;
    Serial.println("✅ TCP connected");
    return true;
  } else {
    tcpFailCount++;
    Serial.printf("❌ TCP connect failed (%d/%d)\n", tcpFailCount, MAX_TCP_FAILURES);
    return false;
  }
}

bool sendFrame() {
  camera_fb_t* fb = esp_camera_fb_get();
  if (!fb) {
    Serial.println("❌ Failed to capture frame");
    return false;
  }

  uint32_t len = fb->len;
  uint32_t ck  = calculateChecksum(fb->buf, len);

  bool ok = true;
  ok &= (tcpClient.write((uint8_t*)&len, 4) == 4);
  ok &= (tcpClient.write(fb->buf, len)   == (int)len);
  ok &= (tcpClient.write((uint8_t*)&ck, 4) == 4);

  esp_camera_fb_return(fb);

  if (ok) {
    lastFrameSentAt = millis();
  } else {
    Serial.println("⚠️ Frame send failed");
  }
  return ok;
}

// ──────────────────────────────────────────────────────────────
//                               SETUP
// ──────────────────────────────────────────────────────────────

void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("\n🔌 ESP32-CAM TCP Stream starting");

  // Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  unsigned long wifiStart = millis();
  while (WiFi.status() != WL_CONNECTED) {
    if (millis() - wifiStart > 10000) {
      Serial.println("❌ WiFi connect timeout");
      enterDeepSleep();
    }
    Serial.print(".");
    delay(500);
  }
  Serial.printf("\n✅ WiFi connected, IP: %s\n", WiFi.localIP().toString().c_str());

  // Camera
  setupCamera();

  // Prime timers
  lastWiFiAttempt  = millis();
  lastTCPAttempt   = millis();
  lastFrameSentAt  = millis();
}

// ──────────────────────────────────────────────────────────────
//                                LOOP
// ──────────────────────────────────────────────────────────────

void loop() {
  unsigned long now = millis();

  // 1) Wi-Fi watchdog
  if (WiFi.status() != WL_CONNECTED) {
    if (now - lastWiFiAttempt >= WIFI_RECONNECT_INTERVAL) {
      Serial.println("📴 WiFi lost, reconnecting...");
      WiFi.disconnect();
      WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
      lastWiFiAttempt = now;
    }
    return;
  }

  // 2) Frame send watchdog
  if (now - lastFrameSentAt >= FRAME_SEND_TIMEOUT) {
    Serial.println("⏱ Frame timeout, soft-reset...");
    enterDeepSleep();
  }

  // 3) TCP reconnect logic
  if (!tcpClient.connected()) {
    if (tcpFailCount >= MAX_TCP_FAILURES) {
      Serial.println("⚠️ Too many TCP failures, soft-reset...");
      enterDeepSleep();
    }
    if (now - lastTCPAttempt >= TCP_RECONNECT_INTERVAL) {
      Serial.println("🔄 Attempting TCP reconnect...");
      tcpClient.stop();
      connectTCP();
      lastTCPAttempt = now;
    }
    return;
  }

  // 4) Transmit next frame
  sendFrame();
}
